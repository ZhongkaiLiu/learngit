Git Notes:

1. Init a repo: $ git init

2. Add to stage: $ git add <filename>

3. Commit: $ git commit -m "comments here"

4. Check status: $ git status

5. Compare difference between work dir and stage: $ git diff
   Compare difference between work dir and HEAD: $ git diff HEAD
   Compare difference between work dir and stage for a specific file: $ git diff <filename>
   Compare difference between work dir and HEAD for a specific files: $ git diff HEAD -- <filename>   

6. Change version: $ git reset --hard <commit_id>
   <commit_id> can be 
   HEAD^ for previous 1st commit
   HEAD^^ for previous 2nd commit
   ...
   HEAD~100 for previous 100th commit

7. Check commit log: $ git log, to check the previous <commit_id>

8. Check command log: $ git reflog, to know the future <commit_id>

9. Working Directory => Stage => Branch(master)

10. Git tracks changes of files, not files.
    Only changes that are staged ($git add) can be commited to branch

11. Discard changes in working directory: $ git restore <filename>

12. Unstage changes in stage: $ git restore --staged <filename>

13. To completely discard changes in staged change (i.e. go to committed version):
    First, unstage changes: $ git restore --staged <filename>
    Second, discard changes in work dir: $ git restore <filename>

14. Delete files: 
    1. remove file, then update stage:
        1. $ rm <filename>
        2. $ git add/rm <filename>
	3. $ git commit -m "comments here"
    2. remove file and update stage at the same time
	1. $ git rm <filename>
	2. $ git commit -m "comments here"
15. Remote Repo:
    1. Connect to a remote repo: $ git remote add origin git@github.com:ZhongkaiLiu/learngit.git
    2. First time push: $ git push -u origin master
    3. Later push: $ git push origin master

16. Clone remote Repo:
    1. Clone a remote repo to local: $ git clone git@github.com:ZhongkaiLiu/gitskills.git

17. Branch:
    1. Create new branch: $ git branch <branch_name>
    2. Switch to another branch: $ git switch <branch_name> OR $ git checkout <branch_name>
    3. Create and switch new branch: $ git switch -c <branch_name> OR $ git checkout -b <branch_name>
    4. View all branches: $ git branch
    5. Merge other branch to current branch: $ git merge <branch_name>
    6. Delete branch: $ git branch -d <branch_name>

18. Branch Merge Conflict:
    1. when merge conflict occurs, open the file and fix the conflict
    2. show merge graph: $ git log --graph --pretty=oneline --abbrev-commit

19. Branch Merge No Fast Forward: $ git merge --no-ff -m "merge branch dev to current branch without fast forward" dev

20. Branch Management:
    1. master should be used for stable versions
    2. dev is not stable, used for all members to develop
    3. each team member should have its own branch to develop
    4. merge personal dev branch to shared dev branch
    5. merge dev branch to master branch to release new stable versions

21. Bug Branch:
    1. to fix a bug, create and switch to a new bug branch, then fix the bug, then merge bug branch back, then delete the bug branch
    2. when there are some uncommited changes on dev branch, we must first stash them, then we can switch branch
    3. without stashing first, we cannot switch to other branch

22. Stash:
    1. stash current work dir and make the work dir clean: $ git stash
    2. view the stash list: $ git stash list
    3. restore the stash back: $ git stash apply
    4. remove one stash: $ git stash drop
    5. restore the stash and remove it: $ git stash pop
    6. operate on a certain stash: $ git stash apply stash@{0}

23. Apply same commit from other branch to current branch to reduce repeated work: $ git cherry-pick <commit_id>

24. Delete a branch that is not fully merged: 
    1. the branch is not fully merged, so it cannot be deleted by: $ git branch -d <branch_name>
    2. $ git branch -D <branch_name>

25. Remote:
    1. check remote repo: $ git remote
    2. check remote repo with more details: $ git remote -v

26. Remote: push
    1. push local repo to remote: $ git push <remote_name> <branch_name> (e.g. $ git push origin master)

27. Remote: clone remote branch to local:
    1. git checkout -b <branch_name> <remote/branch_name> (e.g. $ git checkout -b dev origin/dev)

28. Remote: pull
    1. pull remote branch to local: $ git pull
    2. when try to pull, but no tracking information for current branch: $ git pull <remote> <branch> (e.g. $ git pull origin dev)
    3. set tracking information for the branch: $ git branch --set-upstream-to=<remote/branch> <branch> (e.g. $ git branch --set-upstream-to=origin/dev dev)

29. Collaborations:
    1. push local work to remote: $ git push <remote> <branch_name>
    2. if push failed, then pull remote to local: $ git pull (if pull failed, set tracking information)
    3. fix the conflicts, and merge
    4. push again: $ git push <remote> <branch_name>

30. Rebase:    
    1. use rebase to make multiple log branches to single one log branch: $ git rebase

31. Tag:
    1. make a tag to a commit: $ git tag <tag_name> <commit_id> (default <commit_id> is current HEAD)
    2. make a tag to a commit with message: $ git tag -a <tag_name> -m "message there" <commit_id>
    3. show all tags: $ git tag
    4. delete local tags: $ git tag -d <tag_name>
    5. push a tag to remote: $ git push origin <tag_name>
    6. push all tags to remote: $ git push origin --tags
    7. delete a remote tags: $ git push :refs/tags/<tag_name>
    8. we can reset to a commit using tag: $ git reset --hard <tag_name>

32. GitHub:
    1. we can fork any open repo
    2. we can read and write the forked repo
    3. make a pull request to the original repo to contribute our work


